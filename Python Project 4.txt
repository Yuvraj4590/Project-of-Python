{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69d1176e-157e-4842-9871-291c2607e8c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What's your age?  25\n",
      "Please choose time unit: Years, Months, Weeks, Days, Hours, Minutes, Seconds.  Months\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You have lived for approximately 300 months.\n"
     ]
    }
   ],
   "source": [
    "    from datetime import datetime, timedelta\n",
    "    \n",
    "    def calculate_lived_duration(age, time_unit):\n",
    "        # Calculate the start date (current date minus age)\n",
    "        current_date = datetime.now()\n",
    "        birth_date = current_date - timedelta(days=age*365)  # Approximating age in days\n",
    "    \n",
    "        # Calculate the duration between birth_date and current_date\n",
    "        duration = current_date - birth_date\n",
    "    \n",
    "        # Calculate duration in different time units\n",
    "        total_seconds = duration.total_seconds()\n",
    "        years = age\n",
    "        months = years * 12\n",
    "        weeks = duration.days // 7\n",
    "        days = duration.days\n",
    "        hours = total_seconds // 3600\n",
    "        minutes = total_seconds // 60\n",
    "        seconds = total_seconds\n",
    "    \n",
    "        # Prepare the result based on user's choice of time unit\n",
    "        if time_unit.lower() == 'years':\n",
    "            result = years\n",
    "        elif time_unit.lower() == 'months':\n",
    "            result = months\n",
    "        elif time_unit.lower() == 'weeks':\n",
    "            result = weeks\n",
    "        elif time_unit.lower() == 'days':\n",
    "            result = days\n",
    "        elif time_unit.lower() == 'hours':\n",
    "            result = hours\n",
    "        elif time_unit.lower() == 'minutes':\n",
    "            result = minutes\n",
    "        elif time_unit.lower() == 'seconds':\n",
    "            result = seconds\n",
    "        else:\n",
    "            result = None\n",
    "        \n",
    "        return result\n",
    "    \n",
    "    # Example usage:\n",
    "    if __name__ == \"__main__\":\n",
    "        # Ask for user input\n",
    "        age = int(input(\"What's your age? \"))\n",
    "        time_unit = input(\"Please choose time unit: Years, Months, Weeks, Days, Hours, Minutes, Seconds. \")\n",
    "    \n",
    "        # Calculate lived duration\n",
    "        lived_duration = calculate_lived_duration(age, time_unit)\n",
    "    \n",
    "        # Print the result\n",
    "        if lived_duration is not None:\n",
    "            print(f\"You have lived for approximately {lived_duration} {time_unit.lower()}.\")\n",
    "        else:\n",
    "            print(\"Invalid time unit selected.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2b15101-2a04-42c6-a607-bff0647e56d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Survival duration: 12466 days, 21:33:59.916883\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "class SurvivalCalculator:\n",
    "    def __init__(self, birth_date):\n",
    "        self.birth_date = birth_date\n",
    "\n",
    "    def calculate_survival_duration(self):\n",
    "        current_date = datetime.now()\n",
    "        survival_duration = current_date - self.birth_date\n",
    "        return survival_duration\n",
    "\n",
    "# Example usage:\n",
    "if __name__ == \"__main__\":\n",
    "    birth_date = datetime(1990, 5, 4)  # Replace with the actual birth date\n",
    "    calculator = SurvivalCalculator(birth_date)\n",
    "    duration = calculator.calculate_survival_duration()\n",
    "    print(f\"Survival duration: {duration}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "24307d2a-7b30-4e66-b767-37382fd4cc13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duration: 34 years, 1 months, 14 days, 3.0 hours, 15.0 minutes, 30.0 seconds\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime, timedelta\n",
    "\n",
    "def calculate_duration(start_date, end_date):\n",
    "    # Calculate the difference between the dates\n",
    "    duration = end_date - start_date\n",
    "\n",
    "    # Calculate years\n",
    "    years = duration.days // 365\n",
    "    remaining_days = duration.days % 365\n",
    "\n",
    "    # Calculate months and days\n",
    "    months = remaining_days // 30\n",
    "    days = remaining_days % 30\n",
    "\n",
    "    # Calculate hours, minutes, and seconds from remaining seconds\n",
    "    total_seconds = duration.total_seconds()\n",
    "    hours = total_seconds // 3600 % 24\n",
    "    minutes = total_seconds // 60 % 60\n",
    "    seconds = total_seconds % 60\n",
    "\n",
    "    return years, months, days, hours, minutes, seconds\n",
    "\n",
    "# Example usage:\n",
    "if __name__ == \"__main__\":\n",
    "    start_date = datetime(1990, 5, 15, 12, 30, 0)\n",
    "    end_date = datetime(2024, 6, 19, 15, 45, 30)\n",
    "\n",
    "    years, months, days, hours, minutes, seconds = calculate_duration(start_date, end_date)\n",
    "\n",
    "    print(f\"Duration: {years} years, {months} months, {days} days, {hours} hours, {minutes} minutes, {seconds} seconds\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4e983a1-487c-44d8-b427-f109c7d13a08",
   "metadata": {},
   "outputs": [],
   "source": [
    "Achieving successful execution of an application without any errors is a fundamental goal in software development. Here are key considerations and practices to help ensure this:\n",
    "\n",
    "1. **Code Quality**: Write clean, readable, and maintainable code. Follow coding standards and best practices specific to the programming language or framework you are using.\n",
    "\n",
    "2. **Unit Testing**: Implement unit tests for individual components of your application. Unit tests validate that each function, method, or class behaves correctly under different conditions.\n",
    "\n",
    "3. **Integration Testing**: Test the integration of various components and modules within your application. This ensures that interactions between different parts of the application work as expected.\n",
    "\n",
    "4. **Regression Testing**: Regularly perform regression tests to ensure that new changes or updates do not introduce unintended side effects or break existing functionality.\n",
    "\n",
    "5. **Error Handling**: Implement robust error handling mechanisms throughout your codebase. This includes handling unexpected inputs, exceptions, and edge cases gracefully to prevent crashes or unexpected behavior.\n",
    "\n",
    "6. **Static Code Analysis**: Use tools for static code analysis to identify potential issues such as code smells, potential bugs, or inefficient code before runtime.\n",
    "\n",
    "7. **Continuous Integration (CI)**: Set up a CI pipeline that automatically builds, tests, and validates your application whenever changes are made to the codebase. This helps catch errors early in the development process.\n",
    "\n",
    "8. **Monitoring and Logging**: Incorporate logging and monitoring mechanisms into your application to track its performance and behavior in real-time. This helps quickly identify and diagnose any issues that occur in production.\n",
    "\n",
    "9. **Peer Code Reviews**: Conduct regular code reviews with team members to identify bugs, improve code quality, and ensure adherence to coding standards.\n",
    "\n",
    "10. **Documentation**: Maintain comprehensive documentation for your application, including installation instructions, usage guidelines, and troubleshooting tips. Clear documentation facilitates understanding and troubleshooting for developers and users alike.\n",
    "\n",
    "By following these practices consistently throughout the development lifecycle, you increase the likelihood of achieving successful execution of your application without encountering critical errors. Continuous improvement and proactive testing are key to delivering reliable and robust software solutions."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
